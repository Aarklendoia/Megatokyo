<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Megatokyo.Server</name>
    </assembly>
    <members>
        <member name="T:Megatokyo.Server.Controllers.ChaptersController">
            <summary>
            API for chapters.
            </summary>
        </member>
        <member name="M:Megatokyo.Server.Controllers.ChaptersController.#ctor(MediatR.IMediator,AutoMapper.IMapper)">
            <summary>
            Create new ChaptersController instance.
            </summary>
            <param name="mediator"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Megatokyo.Server.Controllers.ChaptersController.GetAllChapters">
            <summary>
            Get all chapters.
            </summary>
            <returns>List of chapters</returns>
            <response code="200">Return in case the list have some chapters.</response>
            <response code="204">Return in case the list is empty.</response>
            <response code="500">Return in case of internal server error.</response> 
        </member>
        <member name="M:Megatokyo.Server.Controllers.ChaptersController.GetChapter(System.String)">
            <summary>
            Get a chapter by his number.
            </summary>
            <param name="category">Chapter's category</param>
            <returns>A Chapter</returns>
            <response code="200">Return in case the chapter exists.</response>
            <response code="400">Return in case the parameters are incorect.</response>
            <response code="404">Returned in case the chapter is not found.</response>*
            <response code="500">Return in case of internal server error.</response>
        </member>
        <member name="M:Megatokyo.Server.Controllers.RantsController.#ctor(MediatR.IMediator,AutoMapper.IMapper)">
            <summary>
            Create new RantsController instance.
            </summary>
            <param name="mediator"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Megatokyo.Server.Controllers.RantsController.GetAllRants">
            <summary>
            Get all rants.
            </summary>
            <returns>List of rants</returns>
            <response code="200">Return in case the list have some rants.</response>
            <response code="204">Return in case the list is empty.</response>
            <response code="500">Return in case of internal server error.</response> 
        </member>
        <member name="M:Megatokyo.Server.Controllers.RantsController.GetRant(System.Int32)">
            <summary>
            Get a rant by his number.
            </summary>
            <param name="number">Rant's number</param>
            <returns>A rant</returns>
            <response code="200">Return in case the rant exists.</response>
            <response code="404">Returned in case the rant is not found.</response>*
            <response code="500">Return in case of internal server error.</response>
        </member>
        <member name="T:Megatokyo.Server.Controllers.v1.StripsController">
            <summary>
            API for strips.
            </summary>
        </member>
        <member name="M:Megatokyo.Server.Controllers.v1.StripsController.#ctor(MediatR.IMediator,AutoMapper.IMapper)">
            <summary>
            Create new StripsController instance.
            </summary>
            <param name="mediator"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Megatokyo.Server.Controllers.v1.StripsController.GetAllStrips">
            <summary>
            Get all strips.
            </summary>
            <returns>List of strips</returns>
            <response code="200">Return in case the list have some strips.</response>
            <response code="204">Return in case the list is empty.</response>
            <response code="500">Return in case of internal server error.</response> 
        </member>
        <member name="M:Megatokyo.Server.Controllers.v1.StripsController.GetCategoryStrips(System.String)">
            <summary>
            Get this strip of a category.
            </summary>
            <param name="category">Strip's category</param>
            <returns>A strip</returns>
            <response code="200">Return in case the strip exists.</response>
            <response code="400">Return in case the parameters are incorect.</response>
            <response code="500">Return in case of internal server error.</response>
        </member>
        <member name="M:Megatokyo.Server.Controllers.v1.StripsController.GetStrip(System.Int32)">
            <summary>
            Get a strip by his number.
            </summary>
            <param name="number">Strip's number</param>
            <returns>A strip</returns>
            <response code="200">Return in case the strip exists.</response>
            <response code="400">Return in case the parameters are incorect.</response>*
            <response code="404">Returned in case the strip is not found.</response>*
            <response code="500">Return in case of internal server error.</response>
        </member>
        <member name="T:Megatokyo.Models.StringExtractor">
            <summary>
            Extracts a string from a text.
            </summary>
        </member>
        <member name="P:Megatokyo.Models.StringExtractor.Offset">
            <summary>
            Position at which to start the search for the channel to be extracted. Automatically changes after each extraction.
            </summary>
        </member>
        <member name="M:Megatokyo.Models.StringExtractor.Extract(System.String,System.String,System.Boolean)">
            <summary>
            Extracts the text string between the two delimiters.
            </summary>
            <param name="startDelimiter">Start delimiter of the chain to be extracted.</param>
            <param name="endDelimiter">Delimiter of the end of the chain to be extracted.</param>
            <param name="includeDelimiters">Indicates whether the extracted string should contain delimiters or not.</param>
            <returns>Extracted string contained between the two delimiters.</returns>
        </member>
        <member name="M:Megatokyo.Models.StringExtractor.Extract(System.String,System.Boolean)">
            <summary>
            Extracts the text string between the current offset and the delimiter.
            </summary>
            <param name="endDelimiter">Delimiter of the end of the chain to be extracted.</param>
            <param name="includeDelimiters">Indicates whether the extracted string should contain the delimiter or not.</param>
            <returns>Extracted string contained between the two delimiters.</returns>
        </member>
        <member name="M:Megatokyo.Models.StringExtractor.Remove(System.String,System.String,System.Boolean,System.String@)">
            <summary>
            Removes the text string between the two delimiters.
            </summary>
            <param name="startDelimiter">Start delimiter of the chain to be removed.</param>
            <param name="endDelimiter">Delimiter at the end of the chain to be removed.</param>
            <param name="includeDelimiters">Indicates whether the removed string should contain delimiters or not.</param>
            <param name="content">Remaining text string after removal.</param>
            <returns>Indicates whether a new search for a channel to be deleted is possible.</returns>
        </member>
    </members>
</doc>
